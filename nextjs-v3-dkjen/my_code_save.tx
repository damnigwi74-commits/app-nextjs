

"use client";

import { useState } from "react";

type Room = {
  type: string;
  bed_type: string;
  max_occupancy: number;
  sample_rate_usd_per_night: number;
  notes: string;
};

export default function NewHotelPage() {
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [previewUrls, setPreviewUrls] = useState<string[]>([]);
  const [facilities, setFacilities] = useState<string[]>([""]);
  const [dining, setDining] = useState<string[]>([""]);
  const [rooms, setRooms] = useState<Room[]>([
    {
      type: "",
      bed_type: "",
      max_occupancy: 1,
      sample_rate_usd_per_night: 0,
      notes: "",
    },
  ]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files) return;
    const urls = Array.from(files).map((file) => URL.createObjectURL(file));
    setPreviewUrls(urls);
  };

  const handleAddField = (setter: any, values: any[], newValue: any) => {
    setter([...values, newValue]);
  };

  const handleRemoveField = (setter: any, values: any[], index: number) => {
    setter(values.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");

    const form = e.currentTarget;
    const formData = new FormData(form);

    // Append dynamic lists
    formData.append("facilities", JSON.stringify(facilities.filter(Boolean)));
    formData.append("dining", JSON.stringify(dining.filter(Boolean)));
    formData.append("rooms", JSON.stringify(rooms));

    try {
      const res = await fetch("/api/hotels/create", {
        method: "POST",
        body: formData,
      });

      if (!res.ok) throw new Error("Upload failed");

      setMessage("‚úÖ Hotel created successfully!");
      form.reset();
      setPreviewUrls([]);
      setFacilities([""]);
      setDining([""]);
      setRooms([
        {
          type: "",
          bed_type: "",
          max_occupancy: 1,
          sample_rate_usd_per_night: 0,
          notes: "",
        },
      ]);
    } catch (err) {
      console.error(err);
      setMessage("‚ùå Failed to create hotel");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 mt-20">
      <h1 className="text-2xl font-bold mb-6">üè® Add New Hotel</h1>

      <form onSubmit={handleSubmit} className="space-y-5">
        {/* BASIC INFO */}
        <div>
          <label className="block font-medium mb-1">Hotel Name</label>
          <input
            type="text"
            name="name"
            className="border p-2 w-full rounded"
            placeholder="Enter hotel name"
            required
          />
        </div>

        <div>
          <label className="block font-medium mb-1">Description</label>
          <textarea
            name="description"
            className="border p-2 w-full rounded"
            rows={3}
            placeholder="Brief hotel description"
            required
          />
        </div>

        {/* LOCATION */}
        <h3 className="font-semibold text-lg mt-6">üìç Location</h3>
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            name="city"
            placeholder="City"
            className="border p-2 rounded"
            required
          />
          <input
            type="text"
            name="address"
            placeholder="Address"
            className="border p-2 rounded"
            required
          />
          <input
            type="number"
            step="any"
            name="latitude"
            placeholder="Latitude"
            className="border p-2 rounded"
            required
          />
          <input
            type="number"
            step="any"
            name="longitude"
            placeholder="Longitude"
            className="border p-2 rounded"
            required
          />
        </div>

        {/* POLICIES */}
        <h3 className="font-semibold text-lg mt-6">üìã Policies</h3>
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            name="check_in"
            placeholder="Check-in (e.g. 14:00)"
            className="border p-2 rounded"
            required
          />
          <input
            type="text"
            name="check_out"
            placeholder="Check-out (e.g. 11:00)"
            className="border p-2 rounded"
            required
          />
        </div>
        <label className="flex items-center space-x-2">
          <input type="checkbox" name="pets" value="true" />
          <span>Pets allowed?</span>
        </label>

        {/* CONTACT */}
        <h3 className="font-semibold text-lg mt-6">‚òéÔ∏è Contact</h3>
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            name="phone"
            placeholder="Phone"
            className="border p-2 rounded"
            required
          />
          <input
            type="url"
            name="website"
            placeholder="Website URL"
            className="border p-2 rounded"
            required
          />
        </div>

        {/* FACILITIES */}
        <h3 className="font-semibold text-lg mt-6">üèãÔ∏è Facilities</h3>
        {facilities.map((f, i) => (
          <div key={i} className="flex items-center gap-2 mb-2">
            <input
              type="text"
              value={f}
              onChange={(e) => {
                const updated = [...facilities];
                updated[i] = e.target.value;
                setFacilities(updated);
              }}
              className="border p-2 flex-1 rounded"
              placeholder="Facility (e.g. Gym)"
            />
            {i > 0 && (
              <button
                type="button"
                onClick={() => handleRemoveField(setFacilities, facilities, i)}
                className="text-red-600 text-sm"
              >
                ‚úñ
              </button>
            )}
          </div>
        ))}
        <button
          type="button"
          onClick={() => handleAddField(setFacilities, facilities, "")}
          className="text-blue-600 text-sm"
        >
          ‚ûï Add facility
        </button>

        {/* DINING */}
        <h3 className="font-semibold text-lg mt-6">üçΩÔ∏è Dining Options</h3>
        {dining.map((d, i) => (
          <div key={i} className="flex items-center gap-2 mb-2">
            <input
              type="text"
              value={d}
              onChange={(e) => {
                const updated = [...dining];
                updated[i] = e.target.value;
                setDining(updated);
              }}
              className="border p-2 flex-1 rounded"
              placeholder="Dining (e.g. Restaurant)"
            />
            {i > 0 && (
              <button
                type="button"
                onClick={() => handleRemoveField(setDining, dining, i)}
                className="text-red-600 text-sm"
              >
                ‚úñ
              </button>
            )}
          </div>
        ))}
        <button
          type="button"
          onClick={() => handleAddField(setDining, dining, "")}
          className="text-blue-600 text-sm"
        >
          ‚ûï Add dining
        </button>

        {/* ROOMS */}
        <h3 className="font-semibold text-lg mt-6">üõèÔ∏è Rooms</h3>
        {rooms.map((r, i) => (
          <div
            key={i}
            className="border p-4 rounded mb-4 grid grid-cols-2 gap-3 relative"
          >
            {i > 0 && (
              <button
                type="button"
                onClick={() => handleRemoveField(setRooms, rooms, i)}
                className="absolute top-2 right-2 text-red-500"
              >
                ‚úñ
              </button>
            )}
            <input
              type="text"
              value={r.type}
              onChange={(e) => {
                const updated = [...rooms];
                updated[i].type = e.target.value;
                setRooms(updated);
              }}
              placeholder="Room Type (e.g. Deluxe)"
              className="border p-2 rounded"
            />
            <input
              type="text"
              value={r.bed_type}
              onChange={(e) => {
                const updated = [...rooms];
                updated[i].bed_type = e.target.value;
                setRooms(updated);
              }}
              placeholder="Bed Type (e.g. King)"
              className="border p-2 rounded"
            />
            <input
              type="number"
              value={r.max_occupancy}
              onChange={(e) => {
                const updated = [...rooms];
                updated[i].max_occupancy = Number(e.target.value);
                setRooms(updated);
              }}
              placeholder="Max Occupancy"
              className="border p-2 rounded"
            />
            <input
              type="number"
              value={r.sample_rate_usd_per_night}
              onChange={(e) => {
                const updated = [...rooms];
                updated[i].sample_rate_usd_per_night = Number(e.target.value);
                setRooms(updated);
              }}
              placeholder="Rate per night (USD)"
              className="border p-2 rounded"
            />
            <textarea
              value={r.notes}
              onChange={(e) => {
                const updated = [...rooms];
                updated[i].notes = e.target.value;
                setRooms(updated);
              }}
              placeholder="Notes"
              className="border p-2 rounded col-span-2"
            />
          </div>
        ))}
        <button
          type="button"
          onClick={() =>
            handleAddField(setRooms, rooms, {
              type: "",
              bed_type: "",
              max_occupancy: 1,
              sample_rate_usd_per_night: 0,
              notes: "",
            })
          }
          className="text-blue-600 text-sm"
        >
          ‚ûï Add room
        </button>
        

        {/* IMAGES */}
        <h3 className="font-semibold text-lg mt-6">üñºÔ∏è Upload Images</h3>
        <input
          type="file"
          name="images"
          accept="image/*"
          multiple
          className="border p-2 w-full rounded"
          onChange={handleFileChange}
          required
        />

        {previewUrls.length > 0 && (
          <div className="flex flex-wrap gap-3 mt-3">
            {previewUrls.map((url, i) => (
              <img
                key={i}
                src={url}
                alt="preview"
                className="w-24 h-24 object-cover rounded shadow"
              />
            ))}
          </div>
        )}

        <button
          type="submit"
          disabled={loading}
          className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition"
        >
          {loading ? "Uploading..." : "Create Hotel"}
        </button>
      </form>

      {message && (
        <p
          className={`mt-4 text-sm font-semibold ${
            message.startsWith("‚úÖ") ? "text-green-600" : "text-red-600"
          }`}
        >
          {message}
        </p>
      )}
    </div>
  );
}






---------------------------------------------------------------------------------------------------

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation"

export default function HotelsPage() {

  const router = useRouter();


  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [city, setCity] = useState("");
  const [address, setAddress] = useState("");
  const [checkIn, setCheckIn] = useState("");
  const [checkOut, setCheckOut] = useState("");
  const [coverImage, setCoverImage] = useState<File | null>(null);
  const [gallery, setGallery] = useState<File[]>([]);
  const [previewImages, setPreviewImages] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  // üñºÔ∏è Preview gallery
  const handleGalleryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setLoading(false)
    const files = Array.from(e.target.files || []);
    setGallery(files);
    const previews = files.map((file) => URL.createObjectURL(file));
    setPreviewImages(previews);
  };

  const handleRemoveImage = (index: number) => {
    setLoading(false)
    setGallery(gallery.filter((_, i) => i !== index));
    setPreviewImages(previewImages.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");

    const formData = new FormData();
    formData.append("name", name);
    formData.append("description", description);
    formData.append("check_in", checkIn);
    formData.append("check_out", checkOut);
    formData.append("city", city);
    formData.append("address", address);
    if (coverImage) formData.append("coverImage", coverImage);
    gallery.forEach((file) => formData.append("images", file));

    const res = await fetch("/api/hotels/create", { method: "POST", body: formData });
    const data = await res.json();

    if (data.success) {
      setMessage("‚úÖ Hotel created successfully!");
      setName("");
      setDescription("");
      setCoverImage(null);
      setGallery([]);
      setPreviewImages([])
      setLoading(false)

      // Navigate after a short delay
        setTimeout(() => router.push("/hotels"), 1);
    } else {
      setLoading(false)
      setMessage("‚ùå Error: " + data.error);
    }

  };

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-6 mt-10">
      <h1 className="text-2xl font-semibold">Add New Hotel</h1>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* BASIC INFO */}
        <div className="gap-2">

          <div>
            <label className="block font-medium mb-4">Hotel Name</label>
            <input
              type="text"
              name="name"
              className="border p-2 w-full rounded"
              placeholder="Hotel Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-4">Description</label>
            <textarea
              name="description"
              className="border p-2 w-full rounded"
              rows={3}
              placeholder="Brief hotel description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              required
            />
          </div>
        </div>
        {/* Location INFO */}
        <label className="block font-medium mb-4 underline">Location Details: </label>
        <div className="grid grid-cols-2 gap-2">
          <div>
            <label className="block font-medium mb-1">City</label>
            <input
              placeholder="City"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              type="text"
              name="city"
              className="border p-2 w-full rounded"
              required
            />
          </div>
          <div>
            <label className="block font-medium mb-1">Address</label>
            <input
              placeholder="Address"
              value={address} onChange={(e) => setAddress(e.target.value)}
              type="text"
              name="address"
              className="border p-2 w-full rounded"
              required
            />
          </div>

          <input />
        </div>
        {/* Check INFO */}
        <label className="block font-medium mb-4 underline">Check In/ Check-Out: </label>
        <div className="grid grid-cols-2 gap-2">
          <div>
            <label className="block font-medium mb-1">Check In</label>
            <input
              placeholder="Check-in"
              value={checkIn}
              onChange={(e) => setCheckIn(e.target.value)}
              type="time"
              name="checkin"
              className="border p-2 w-full rounded"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Check-out</label>
            <input
              placeholder="Check-out"
              value={checkOut}
              onChange={(e) => setCheckOut(e.target.value)}
               type="time"
              name="checkout"
              className="border p-2 w-full rounded"
              required
            />
          </div>

        
        </div>

        {/* Cover Image */}
        <div className="flex flex-col gap-1">
          <label className="font-medium">Cover Image</label>
          <input
            type="file"
            accept="image/*"
            onChange={(e) => setCoverImage(e.target.files?.[0] || null)}
            className="border p-2 w-full rounded"
          />
          {coverImage && <img src={URL.createObjectURL(coverImage)} alt="cover" className="mt-2 w-48 rounded-lg shadow" />}
        </div>

        {/* Gallery Upload */}
        <div className="flex flex-col gap-1">
          <label className="font-medium">Gallery Images</label>
          <input className="border p-2 w-full rounded" multiple type="file" accept="image/*" onChange={handleGalleryChange} />
          <div className="flex flex-wrap gap-3 mt-2">
            {previewImages.map((src, i) => (
              <div key={i} className="relative">
                <img src={src} alt="" className="w-32 h-24 object-cover rounded shadow" />
                <button
                  type="button"
                  className="absolute top-0 right-0 bg-red-500 text-white rounded-full px-2 py-1 text-xs"
                  onClick={() => handleRemoveImage(i)}
                >
                  ‚úï
                </button>
              </div>
            ))}
          </div>
        </div>

        <button
          disabled={loading}
          type="submit"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {loading ? "Saving..." : "Save Hotel"}
        </button>
      </form>

      {message && <p className="mt-4 text-center">{message}</p>}
    </div>
  );
}


 -------------------------------------------------------------------------------------



 import { NextResponse } from "next/server";
import prisma from "../../../../lib/prisma";
import { randomUUID } from "crypto";
import fs from "fs";
import path from "path";

// Ensure local uploads folder exists
const uploadDir = path.join(process.cwd(), "public", "uploads");
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

export async function POST(req: Request) {
  try {
    const formData = await req.formData();

    const name = formData.get("name") as string;
    const description = formData.get("description") as string;
    const check_in = formData.get("check_in") as string;
    const check_out = formData.get("check_out") as string;
    const city = formData.get("city") as string;
    const address = formData.get("address") as string;
    const latitude = parseFloat(formData.get("latitude") as string);
    const longitude = parseFloat(formData.get("longitude") as string);

    // üñºÔ∏è Handle image uploads
    const coverImage = formData.get("coverImage") as File | null;
    const galleryFiles = formData.getAll("images") as File[];

    let coverImageUrl = "";
    let galleryUrls: any[] = [];

    if (coverImage) {
      const coverFileName = `${randomUUID()}_${coverImage.name}`;
      const coverFilePath = path.join(uploadDir, coverFileName);
      const buffer = Buffer.from(await coverImage.arrayBuffer());
      fs.writeFileSync(coverFilePath, buffer);
      coverImageUrl = `/uploads/${coverFileName}`;
    }

    if (galleryFiles.length > 0) {
      for (const file of galleryFiles) {
        const fileName = `${randomUUID()}_${file.name}`;
        const filePath = path.join(uploadDir, fileName);
        const buffer = Buffer.from(await file.arrayBuffer());
        fs.writeFileSync(filePath, buffer);
        galleryUrls.push({ url: `/uploads/${fileName}`, caption: "Uploaded image" });
      }
    }

    // üè® Save to database
    const hotel = await prisma.hotel.create({
      data: {
       // hotel_id: `hotel_${randomUUID().slice(0, 6)}`,
        hotel_id: `hotel_${randomUUID()}`,
        name,
        coverImageUrl,
        description,
        check_in,
        check_out,
        city,
        address,
        latitude,
        longitude,
        images: galleryUrls,
        location: {
          city,
          address,
          latitude,
          longitude,
        },
      },
    });

    return NextResponse.json({ success: true, hotel });
  } catch (err: any) {
    console.error("‚ùå Hotel creation error:", err);
    return NextResponse.json({ success: false, error: err.message }, { status: 500 });
  }
}


 -------------------------------------------------------------------------------------


